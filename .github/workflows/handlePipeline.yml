name: Ephemeral Environment

on:
  push:
    branches-ignore:
      - "main"
  pull_request:
    types: [closed, opened]  # Add opened to track new PRs
  delete:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
      teardown_only:
        description: "Run only the teardown step?"
        required: false
        default: "false"

env:
  BRANCH_NAME: ${{ github.event.inputs.branch || github.head_ref || github.ref_name || github.event.ref }}
  
jobs:
  ephemeral-env:
    # Skip this job for PRs targeting main
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.base.ref != 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Compute PREFIX ENV variable from repo name
        id: compute-prefix
        run: |
          PREFIX=$(echo "${BRANCH_NAME}" | sed -E 's/[^a-zA-Z0-9]+/ /g' | \
            awk '{for(i=1;i<=NF;i++) printf("%s", substr($i,1,1));}')
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "STACK_NAME=$PREFIX" >> $GITHUB_ENV
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://infrastructure/pipeline/template.yaml

      - name: Install SAM
        uses: aws-actions/setup-sam@v2

      - name: Deploy CloudFormation stack
        if: github.event_name == 'push'
        run: |
          echo "${{ env.PREFIX }}"

          sam build -t ./infrastructure/pipeline/template.yaml

          sam deploy \
            --region us-east-1 \
            --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-l9itovocker9 \
            --s3-prefix game-checker-pipeline \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
                ParameterKey=GitHubBranch,ParameterValue=${{ env.BRANCH_NAME }} \
                ParameterKey=GitHubRepo,ParameterValue=$REPO_NAME \
                ParameterKey=Prefix,ParameterValue=${{ env.PREFIX }}

      - name: Run pipeline
        if: github.event_name == 'push'
        run: |
          set -e

          # Start the pipeline
          EXECUTION_ID=$(aws codepipeline start-pipeline-execution \
            --name "${{ env.BRANCH_NAME }}" \
            --query 'pipelineExecutionId' \
            --output text)

          echo "Started pipeline execution: $EXECUTION_ID"

  main-pipeline:
    if: ${{ github.event.pull_request.base.ref == 'main' && 
            github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set repo name
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install SAM
        uses: aws-actions/setup-sam@v2

      - name: Deploy main pipeline
        run: |
          sam build -t ./infrastructure/pipeline/template.yaml

          sam deploy \
            --region us-east-1 \
            --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-l9itovocker9 \
            --s3-prefix game-checker-pipeline \
            --stack-name game-checker-pipeline \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
                ParameterKey=GitHubBranch,ParameterValue=main \
                ParameterKey=GitHubRepo,ParameterValue=$REPO_NAME

      - name: Run pipeline
        run: |
          set -e
          EXECUTION_ID=$(aws codepipeline start-pipeline-execution \
            --name "main" \
            --query 'pipelineExecutionId' \
            --output text)
          
          echo "Started main pipeline execution: $EXECUTION_ID"

  teardown:
    if: |
      github.event.inputs.teardown_only == 'true' || 
      (github.event_name == 'pull_request' && github.event.action == 'closed') ||
      github.event_name == 'delete'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cleanup: ['ephemeral-buckets', 'ui-folder', 'stacks']
      max-parallel: 3
      fail-fast: false
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Compute PREFIX ENV variable from branch
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch || github.head_ref || github.ref_name }}"
          PREFIX=$(echo "$BRANCH_NAME" | sed -E 's/[^a-zA-Z0-9]+/ /g' | \
            awk '{for(i=1;i<=NF;i++) printf("%s", substr($i,1,1));}')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "STACK_NAME=$PREFIX" >> $GITHUB_ENV
          echo "EPHEMERAL_STACK=ephemeral-$BRANCH_NAME" >> $GITHUB_ENV

      - name: Delete ephemeral buckets
        if: matrix.cleanup == 'ephemeral-buckets'
        run: |
          set -euo pipefail
          echo "üîé Searching for buckets named ephemeral-${BRANCH_NAME}*"
          BUCKETS=$(aws s3api list-buckets --query "Buckets[].Name" --output text | tr '\t' '\n' | grep "^ephemeral-${BRANCH_NAME}" || true)
          for BUCKET in $BUCKETS; do
            echo "ü™£ Emptying and deleting bucket: $BUCKET"
            aws s3 rm "s3://$BUCKET" --recursive || true
            aws s3api delete-bucket --bucket "$BUCKET" || true
          done

      - name: Delete UI bucket folder
        if: matrix.cleanup == 'ui-folder'
        run: |
          set -euo pipefail
          echo "üîé Deleting folder ${BRANCH_NAME} from game-checker-ui bucket"
          aws s3 rm "s3://game-checker-ui/${BRANCH_NAME}" --recursive || true
          echo "‚úÖ Deleted folder: ${BRANCH_NAME}"

      - name: Delete ephemeral stacks
        if: matrix.cleanup == 'stacks'
        run: |
          set -euo pipefail

          delete_stack () {
            local STACK="$1"
            echo "üîé Processing stack: $STACK"

            BUCKETS=$(aws cloudformation describe-stack-resources \
              --stack-name "$STACK" \
              --query "StackResources[?ResourceType=='AWS::S3::Bucket'].PhysicalResourceId" \
              --output text 2>/dev/null || true)

            for BUCKET in $BUCKETS; do
              echo "ü™£ Emptying bucket: $BUCKET"
              aws s3 rm "s3://$BUCKET" --recursive || true
            done

            echo "üóë Deleting stack: $STACK"
            aws cloudformation delete-stack --stack-name "$STACK"
            aws cloudformation wait stack-delete-complete --stack-name "$STACK"
            echo "‚úÖ Deleted stack: $STACK"
          }

          echo "Looking for stacks with prefix: ${{ env.PREFIX }}"
          STACKS=$(aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE UPDATE_ROLLBACK_COMPLETE \
            --query "StackSummaries[?starts_with(StackName, \`${{ env.PREFIX }}\`)].StackName" \
            --output text)

          for STACK in $STACKS; do
            delete_stack "$STACK"
          done

          # Explicit ephemeral-${BRANCH_NAME} stack
          STACK_NAME="${{ env.EPHEMERAL_STACK }}"
          echo "Checking for explicit ephemeral stack: $STACK_NAME"

          EXISTS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" \
            --query "Stacks[0].StackName" --output text 2>/dev/null || true)

          if [ "$EXISTS" = "$STACK_NAME" ]; then
            delete_stack "$STACK_NAME"
          else
            echo "‚ÑπÔ∏è No explicit ephemeral stack found for $STACK_NAME"
          fi