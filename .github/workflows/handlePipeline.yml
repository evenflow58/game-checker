name: Ephemeral Environment

on:
  push:
    branches-ignore:
      - "main"
      - "master"
  pull_request:
    types: [closed]
  workflow_dispatch:  # üëà allows manual trigger
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
      teardown_only:
        description: "Run only the teardown step?"
        required: false
        default: "false"

env:
  STACK_NAME: ephemeral-${{ github.event.inputs.branch || github.ref_name }}
  BRANCH_NAME: ${{ github.event.inputs.branch || github.ref_name }}
  
jobs:
  ephemeral-env:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Compute PREFIX ENV variable from repo name
        id: compute-prefix
        run: |
          PREFIX=$(echo "${BRANCH_NAME}" | sed -E 's/[^a-zA-Z0-9]+/ /g' | \
            awk '{for(i=1;i<=NF;i++) printf("%s", substr($i,1,1));}')
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://infrastructure/pipeline/template.yaml

      - name: Install SAM
        uses: aws-actions/setup-sam@v2

      - name: Deploy CloudFormation stack
        if: github.event_name == 'push'
        run: |
          echo "${{ env.PREFIX }}"

          sam build -t ./infrastructure/pipeline/template.yaml

          sam deploy \
            --region us-east-1 \
            --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-l9itovocker9 \
            --s3-prefix game-checker-pipeline \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
                ParameterKey=GitHubBranch,ParameterValue=${{ env.BRANCH_NAME }} \
                ParameterKey=GitHubRepo,ParameterValue=$REPO_NAME \
                ParameterKey=Prefix,ParameterValue=${{ env.PREFIX }}

      - name: Run pipeline
        if: github.event_name == 'push'
        run: |
          set -e

          # Start the pipeline
          EXECUTION_ID=$(aws codepipeline start-pipeline-execution \
            --name "${{ env.BRANCH_NAME }}" \
            --query 'pipelineExecutionId' \
            --output text)

          echo "Started pipeline execution: $EXECUTION_ID"

  teardown:
    if: github.event.inputs.teardown_only == 'true' || (github.event_name == 'pull_request' && github.event.action == 'closed')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Compute PREFIX ENV variable from branch
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch || github.ref_name }}"
          PREFIX=$(echo "$BRANCH_NAME" | sed -E 's/[^a-zA-Z0-9]+/ /g' | \
            awk '{for(i=1;i<=NF;i++) printf("%s", substr($i,1,1));}')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "EPHEMERAL_STACK=ephemeral-${BRANCH_NAME}" >> $GITHUB_ENV

      - name: Delete all ephemeral stacks
        run: |
          echo "Looking for stacks with prefix: ${{ env.PREFIX }}"

          STACKS=$(aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE UPDATE_ROLLBACK_COMPLETE \
            --query "StackSummaries[?starts_with(StackName, \`${{ env.PREFIX }}\`)].StackName" \
            --output text)

          if [ -z "$STACKS" ]; then
            echo "No stacks found with prefix ${{ env.PREFIX }}"
          else
            for STACK in $STACKS; do
              echo "üîé Processing stack: $STACK"

              BUCKETS=$(aws cloudformation describe-stack-resources \
                --stack-name "$STACK" \
                --query "StackResources[?ResourceType=='AWS::S3::Bucket'].PhysicalResourceId" \
                --output text)

              for BUCKET in $BUCKETS; do
                echo "ü™£ Emptying bucket: $BUCKET"
                aws s3 rm "s3://$BUCKET" --recursive || true
              done

              echo "üóë Deleting stack: $STACK"
              aws cloudformation delete-stack --stack-name "$STACK"
              aws cloudformation wait stack-delete-complete --stack-name "$STACK"
              echo "‚úÖ Deleted stack: $STACK"
            done
          fi

      - name: Delete stack with naming convention ephemeral-${BRANCH_NAME}
        run: |
          echo "Checking for stack: $STACK_NAME"

          EXISTS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" \
            --query "Stacks[0].StackName" --output text 2>/dev/null || true)

          if [ "$EXISTS" = "$STACK_NAME" ]; then
            echo "üóë Deleting explicit ephemeral stack: $STACK_NAME"
            aws cloudformation delete-stack --stack-name "$STACK_NAME"
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME"
            echo "‚úÖ Deleted explicit ephemeral stack: $STACK_NAME"
          else
            echo "‚ÑπÔ∏è No explicit ephemeral stack found for $STACK_NAME"
          fi