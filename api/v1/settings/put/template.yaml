AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: The Game Checker V1 Settings PUT api gateway code

Parameters:
  HttpApi:
    Type: String
    Description: The ID of the API Gateway this method should be attached to.
  TableName:
    Type: String
    Description: The name of the database table
  Prefix:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]*"
  AuthorizerId:
    Type: String
    Description: The ID of the authorizer

Resources:
  # Lambda to handle PUT /settings
  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Prefix}PatchSettings"
      CodeUri: ./dist/out-tsc
      Handler: index.handler
      Runtime: nodejs22.x
      Architectures:
        - arm64
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName

  # Permission for API Gateway to invoke Lambda
  Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Function
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*

  # Lambda Execution Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies: # ðŸ‘ˆ Add inline policies here
        - PolicyName: DynamoDBUpdateItemAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*

  # Integration: HTTP API -> Lambda
  SettingsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
      PayloadFormatVersion: "2.0"

  # Route for PUT /settings with Google JWT auth
  SettingsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: PATCH /v1/settings
      Target: !Sub integrations/${SettingsIntegration}
      AuthorizationType: JWT
      AuthorizerId: !Ref AuthorizerId