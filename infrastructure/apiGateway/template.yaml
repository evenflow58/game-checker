AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: The Game Checker api gateway infrastructure

Parameters:
  TableName:
    Type: String
    Description: The name of the table to load data into
  Prefix:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]*"

Resources:
  ApiGateway: 
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: The Game Checker API
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub ["${Prefix}ApiGateway", Prefix: !Ref Prefix]

  Authorizer:
    Type: AWS::CloudFormation::Stack
    DependsOn: ApiGateway
    Properties:
      TemplateURL: ../../api/authorizer/template.yaml
      Parameters:
        ApiGatewayId: !Ref ApiGateway
        Prefix: !Ref Prefix

  V1:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ../../api/v1/template.yaml
      Parameters:
        ApiGatewayId: !Ref ApiGateway
        RootResourceId: !GetAtt ApiGateway.RootResourceId
        AuthorizerId: !GetAtt Authorizer.Outputs.ApiAuthorizerId
        TableName: !Ref TableName
        Prefix: !Ref Prefix
    DependsOn: Authorizer

  # Health:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: ../../api/health/template.yaml
  #     Parameters:
  #       ApiGatewayId: !Ref ApiGateway
  #       RootResourceId: !GetAtt ApiGateway.RootResourceId
  #       Prefix: !Ref Prefix

  # V2:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: ../../../api/v2/template.yaml
  #     Parameters:
  #       ApiGatewayId: !Ref ApiGateway
  #       RootResourceId: !GetAtt ApiGateway.RootResourceId
  #       AuthorizerId: !GetAtt Authorizer.Outputs.ApiAuthorizerId
  #       Prefix: !Ref Prefix
  #   DependsOn: Authorizer

  HealthApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: health

  HealthOptionsEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref HealthApiGatewayResource
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ["${Prefix}GetHealth", { Prefix: !Ref Prefix }]
      CodeUri: ../../api/health/dist/out-tsc
      Handler: index.handler
      Runtime: nodejs22.x
      Architectures:
        - arm64
      Role: !GetAtt LambdaRole.Arn

  GetEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref HealthApiGatewayResource
      HttpMethod: GET
      # AuthorizationType: NONE
      AuthorizationType: CUSTOM
      AuthorizerId: !GetAtt Authorizer.Outputs.ApiAuthorizerId
      Integration:
        Type: AWS_PROXY
        Credentials: !GetAtt ApiRole.Arn
        TimeoutInMillis: 29000
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Function
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  ApiPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ["${Prefix}GetHealthLambdaAccess", { Prefix: !Ref Prefix }]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "lambda:*"
            Resource: !GetAtt Function.Arn
      Roles:
        - !Ref ApiRole

Outputs:
  ApiGatewayId:
    Value: !Ref ApiGateway
    Description: The ID of the api gateway

  RootResourceId:
    Value: !GetAtt ApiGateway.RootResourceId
    Description: The ID of the api root resource